name: Publish xrange

on:
  push:
    branches:
      - master
      - develop

jobs:
  test:
    name: Test changes on ${{ matrix.os }}, and collect coverage
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest

    steps:
      - uses: actions/checkout@v2

      - run: npm ci
      - run: npm run test:ci -- --coverage

      - name: Save coverage report (only for Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v1
        with:
          name: xrange-coverage-at-${{ github.sha }}
          path: coverage

  verify:
    name: Verify publishing conditions
    runs-on: ubuntu-latest
    env:
      REF_MASTER: refs/heads/master
      DIST_TAG_MASTER: latest
      REF_DEVELOP: refs/heads/develop
      DIST_TAG_DEVELOP: next

    outputs:
      # 'true' or 'false'
      can_publish: ${{ steps.main.outputs.can_publish }}

      # 'latest' or 'next' or 'unknown'
      dist_tag: ${{ steps.main.outputs.dist_tag }}

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Check that version is updated, get dist-tag
        id: main
        run: |2
          set -e

          # by default, to prevent accidental publish
          echo "::set-output name=can_publish::false"
          echo "::set-output name=dist_tag::unknown"

          incoming_version=$(node -pe "require('./package.json').version;")
          already_published=$([ -z "$(npm view xrange@$incoming_version version)" ] && echo false || echo true)

          case $GITHUB_REF in
            $REF_MASTER)
              if [ $already_published == true ]
              then
                echo "Cannot publish $incoming_version again; please, update version by running 'npm version <version>'"
                exit 1
              else
                echo "::set-output name=can_publish::true"
                echo "::set-output name=dist_tag::$DIST_TAG_MASTER"
              fi
              ;;

            $REF_DEVELOP)
              if [ $already_published == true ]
              then
                echo "This version ($incoming_version) is already published; please, update version by running 'npm version <version>'"
                echo "Skipping without failure"
              else
                echo "::set-output name=can_publish::true"
                echo "::set-output name=dist_tag::$DIST_TAG_DEVELOP"
              fi
              ;;

            *)
              echo "Unknown release branch ('$GITHUB_REF'), expected '$REF_MASTER' or '$REF_DEVELOP'"
              exit 1
              ;;
          esac

  publish:
    name: Build and publish
    runs-on: ubuntu-latest
    needs:
      - test
      - verify

    if: |2
      needs.verify.outputs.can_publish == 'true' &&
      needs.verify.outputs.dist_tag != 'unknown'

    env:
      dist_tag: ${{ needs.verify.outputs.dist_tag }}

    steps:
      - uses: actions/checkout@v2

      - run: npm ci

      - name: Publish
        run: |2
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_AUTH_TOKEN }}" > .npmrc

          npm publish --tag $dist_tag
